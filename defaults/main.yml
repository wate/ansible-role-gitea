---
gitea_version: latest

gitea_cfg:
  server:
    ##  The protocol the server listens on. One of 'http', 'https', 'http+unix', 'fcgi' or 'fcgi+unix'. Defaults to 'http'
    # PROTOCOL = http
    ##  Expect PROXY protocol headers on connections
    # USE_PROXY_PROTOCOL = false
    ##  Use PROXY protocol in TLS Bridging mode
    # PROXY_PROTOCOL_TLS_BRIDGING = false
    #  Timeout to wait for PROXY protocol header (set to 0 to have no timeout)
    # PROXY_PROTOCOL_HEADER_TIMEOUT=5s
    #  Accept PROXY protocol headers with UNKNOWN type
    # PROXY_PROTOCOL_ACCEPT_UNKNOWN=false
    ##  Set the domain for the server
    # DOMAIN = localhost
    ##  Overwrite the automatically generated public URL. Necessary for proxies and docker.
    # ROOT_URL = %(PROTOCOL)s://%(DOMAIN)s:%(HTTP_PORT)s/
    ##  when STATIC_URL_PREFIX is empty it will follow ROOT_URL
    # STATIC_URL_PREFIX =
    ##  The address to listen on. Either a IPv4/IPv6 address or the path to a unix socket.
    ##  If PROTOCOL is set to `http+unix` or `fcgi+unix`, this should be the name of the Unix socket file to use.
    ##  Relative paths will be made absolute against the _`AppWorkPath`_.
    # HTTP_ADDR = 0.0.0.0
    ##  The port to listen on. Leave empty when using a unix socket.
    # HTTP_PORT = 3000
    ##  If REDIRECT_OTHER_PORT is true, and PROTOCOL is set to https an http server
    ##  will be started on PORT_TO_REDIRECT and it will redirect plain, non-secure http requests to the main
    ##  ROOT_URL.  Defaults are false for REDIRECT_OTHER_PORT and 80 for
    ##  PORT_TO_REDIRECT.
    # REDIRECT_OTHER_PORT = false
    # PORT_TO_REDIRECT = 80
    ##  expect PROXY protocol header on connections to https redirector.
    # REDIRECTOR_USE_PROXY_PROTOCOL = %(USE_PROXY_PROTOCOL)s
    ##  Minimum and maximum supported TLS versions
    # SSL_MIN_VERSION=TLSv1.2
    # SSL_MAX_VERSION=
    ##  SSL Curve Preferences
    # SSL_CURVE_PREFERENCES=X25519,P256
    ##  SSL Cipher Suites
    # SSL_CIPHER_SUITES=; Will default to "ecdhe_ecdsa_with_aes_256_gcm_sha384,ecdhe_rsa_with_aes_256_gcm_sha384,ecdhe_ecdsa_with_aes_128_gcm_sha256,ecdhe_rsa_with_aes_128_gcm_sha256,ecdhe_ecdsa_with_chacha20_poly1305,ecdhe_rsa_with_chacha20_poly1305" if aes is supported by hardware, otherwise chacha will be first.
    ##  Timeout for any write to the connection. (Set to -1 to disable all timeouts.)
    # PER_WRITE_TIMEOUT = 30s
    ##  Timeout per Kb written to connections.
    # PER_WRITE_PER_KB_TIMEOUT = 30s
    ##  Permission for unix socket
    # UNIX_SOCKET_PERMISSION = 666
    ##  Local (DMZ) URL for Gitea workers (such as SSH update) accessing web service.
    ##  In most cases you do not need to change the default value.
    ##  Alter it only if your SSH server node is not the same as HTTP node.
    ##  Do not set this variable if PROTOCOL is set to 'unix'.
    # LOCAL_ROOT_URL = %(PROTOCOL)s://%(HTTP_ADDR)s:%(HTTP_PORT)s/
    ##  When making local connections pass the PROXY protocol header.
    # LOCAL_USE_PROXY_PROTOCOL = %(USE_PROXY_PROTOCOL)s
    ##  Disable SSH feature when not available
    # DISABLE_SSH = false
    ##  Whether to use the builtin SSH server or not.
    # START_SSH_SERVER = false
    ##  Expect PROXY protocol header on connections to the built-in SSH server
    # SSH_SERVER_USE_PROXY_PROTOCOL = false
    ##  Username to use for the builtin SSH server. If blank, then it is the value of RUN_USER.
    # BUILTIN_SSH_SERVER_USER = %(RUN_USER)s
    ##  Domain name to be exposed in clone URL
    # SSH_DOMAIN = %(DOMAIN)s
    ##  SSH username displayed in clone URLs.
    # SSH_USER = %(BUILTIN_SSH_SERVER_USER)s
    ##  The network interface the builtin SSH server should listen on
    # SSH_LISTEN_HOST =
    ##  Port number to be exposed in clone URL
    # SSH_PORT = 22
    ##  The port number the builtin SSH server should listen on
    # SSH_LISTEN_PORT = %(SSH_PORT)s
    ##  Root path of SSH directory, default is '~/.ssh', but you have to use '/home/git/.ssh'.
    # SSH_ROOT_PATH =
    ##  Gitea will create a authorized_keys file by default when it is not using the internal ssh server
    ##  If you intend to use the AuthorizedKeysCommand functionality then you should turn this off.
    # SSH_CREATE_AUTHORIZED_KEYS_FILE = true
    ##  Gitea will create a authorized_principals file by default when it is not using the internal ssh server
    ##  If you intend to use the AuthorizedPrincipalsCommand functionality then you should turn this off.
    # SSH_CREATE_AUTHORIZED_PRINCIPALS_FILE = true
    ##  For the built-in SSH server, choose the ciphers to support for SSH connections,
    ##  for system SSH this setting has no effect
    # SSH_SERVER_CIPHERS = chacha20-poly1305@openssh.com, aes128-ctr, aes192-ctr, aes256-ctr, aes128-gcm@openssh.com, aes256-gcm@openssh.com
    ##  For the built-in SSH server, choose the key exchange algorithms to support for SSH connections,
    ##  for system SSH this setting has no effect
    # SSH_SERVER_KEY_EXCHANGES = curve25519-sha256, ecdh-sha2-nistp256, ecdh-sha2-nistp384, ecdh-sha2-nistp521, diffie-hellman-group14-sha256, diffie-hellman-group14-sha1
    ##  For the built-in SSH server, choose the MACs to support for SSH connections,
    ##  for system SSH this setting has no effect
    # SSH_SERVER_MACS = hmac-sha2-256-etm@openssh.com, hmac-sha2-256, hmac-sha1
    ##  For the built-in SSH server, choose the keypair to offer as the host key
    ##  The private key should be at SSH_SERVER_HOST_KEY and the public SSH_SERVER_HOST_KEY.pub
    ##  relative paths are made absolute relative to the %(APP_DATA_PATH)s
    # SSH_SERVER_HOST_KEYS=ssh/gitea.rsa, ssh/gogs.rsa
    ##  Directory to create temporary files in when testing public keys using ssh-keygen,
    ##  default is the system temporary directory.
    # SSH_KEY_TEST_PATH =
    ##  Path to ssh-keygen, default is 'ssh-keygen' which means the shell is responsible for finding out which one to call.
    # SSH_KEYGEN_PATH = ssh-keygen
    ##  Enable SSH Authorized Key Backup when rewriting all keys, default is true
    # SSH_AUTHORIZED_KEYS_BACKUP = true
    ##  Determines which principals to allow
    ##  - empty: if SSH_TRUSTED_USER_CA_KEYS is empty this will default to off, otherwise will default to email, username.
    ##  - off: Do not allow authorized principals
    ##  - email: the principal must match the user's email
    ##  - username: the principal must match the user's username
    ##  - anything: there will be no checking on the content of the principal
    # SSH_AUTHORIZED_PRINCIPALS_ALLOW = email, username
    ##  Enable SSH Authorized Principals Backup when rewriting all keys, default is true
    # SSH_AUTHORIZED_PRINCIPALS_BACKUP = true
    ##  Specifies the public keys of certificate authorities that are trusted to sign user certificates for authentication.
    ##  Multiple keys should be comma separated.
    ##  E.g."ssh-<algorithm> <key>". or "ssh-<algorithm> <key1>, ssh-<algorithm> <key2>".
    ##  For more information see "TrustedUserCAKeys" in the sshd config manpages.
    # SSH_TRUSTED_USER_CA_KEYS =
    ##  Absolute path of the `TrustedUserCaKeys` file gitea will manage.
    ##  Default this `RUN_USER`/.ssh/gitea-trusted-user-ca-keys.pem
    ##  If you're running your own ssh server and you want to use the gitea managed file you'll also need to modify your
    ##  sshd_config to point to this file. The official docker image will automatically work without further configuration.
    # SSH_TRUSTED_USER_CA_KEYS_FILENAME =
    ##  Enable exposure of SSH clone URL to anonymous visitors, default is false
    # SSH_EXPOSE_ANONYMOUS = false
    ##  Timeout for any write to ssh connections. (Set to -1 to disable all timeouts.)
    ##  Will default to the PER_WRITE_TIMEOUT.
    # SSH_PER_WRITE_TIMEOUT = 30s
    ##  Timeout per Kb written to ssh connections.
    ##  Will default to the PER_WRITE_PER_KB_TIMEOUT.
    # SSH_PER_WRITE_PER_KB_TIMEOUT = 30s
    ##  Indicate whether to check minimum key size with corresponding type
    # MINIMUM_KEY_SIZE_CHECK = false
    ##  Disable CDN even in "prod" mode
    # OFFLINE_MODE = false
    # DISABLE_ROUTER_LOG = false
    ##  TLS Settings: Either ACME or manual
    ##  (Other common TLS configuration are found before)
    # ENABLE_ACME = false
    ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ;
    ##
    ##  ACME automatic TLS settings
    ##
    ##  ACME directory URL (e.g. LetsEncrypt's staging/testing URL: https://acme-staging-v02.api.letsencrypt.org/directory)
    ##  Leave empty to default to LetsEncrypt's (production) URL
    # ACME_URL =
    ##
    ##  Explicitly accept the ACME's TOS. The specific TOS cannot be retrieved at the moment.
    # ACME_ACCEPTTOS = false
    ##
    ##  If the ACME CA is not in your system's CA trust chain, it can be manually added here
    # ACME_CA_ROOT =
    ##
    ##  Email used for the ACME registration service
    ##  Can be left blank to initialize at first run and use the cached value
    # ACME_EMAIL =
    ##
    ##  ACME live directory (not to be confused with ACME directory URL: ACME_URL)
    ##  (Refer to caddy's ACME manager https://github.com/caddyserver/certmagic)
    # ACME_DIRECTORY = https
    ##
    ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ;
    ##
    ##   Manual TLS settings: (Only applicable if ENABLE_ACME=false)
    ##
    ##  Generate steps:
    ##  $ ./gitea cert -ca=true -duration=8760h0m0s -host=myhost.example.com
    ##
    ##  Or from a .pfx file exported from the Windows certificate store (do
    ##  not forget to export the private key):
    ##  $ openssl pkcs12 -in cert.pfx -out cert.pem -nokeys
    ##  $ openssl pkcs12 -in cert.pfx -out key.pem -nocerts -nodes
    ##  Paths are relative to CUSTOM_PATH
    # CERT_FILE = https/cert.pem
    # KEY_FILE = https/key.pem
    ##
    ##  Root directory containing templates and static files.
    ##  default is the path where Gitea is executed
    # STATIC_ROOT_PATH = ; Will default to the built-in value _`StaticRootPath`_
    ##  Default path for App data
    # APP_DATA_PATH = data ; relative paths will be made absolute with _`AppWorkPath`_
    ##  Enable gzip compression for runtime-generated content, static resources excluded
    # ENABLE_GZIP = false
    ##  Application profiling (memory and cpu)
    ##  For "web" command it listens on localhost:6060
    ##  For "serve" command it dumps to disk at PPROF_DATA_PATH as (cpuprofile|memprofile)_<username>_<temporary id>
    # ENABLE_PPROF = false
    ##  PPROF_DATA_PATH, use an absolute path when you start gitea as service
    # PPROF_DATA_PATH = data/tmp/pprof ; Path is relative to _`AppWorkPath`_
    ##  Landing page, can be "home", "explore", "organizations", "login", or any URL such as "/org/repo" or even "https://anotherwebsite.com"
    ##  The "login" choice is not a security measure but just a UI flow change, use REQUIRE_SIGNIN_VIEW to force users to log in.
    # LANDING_PAGE = home
    ##  Enables git-lfs support. true or false, default is false.
    # LFS_START_SERVER = false
    ##  LFS authentication secret, change this yourself
    LFS_JWT_SECRET = "{{ inventory_hostname | hash('sha1') }}"
    ##  LFS authentication validity period (in time.Duration), pushes taking longer than this may fail.
    # LFS_HTTP_AUTH_EXPIRY = 20m
    ##  Maximum allowed LFS file size in bytes (Set to 0 for no limit).
    # LFS_MAX_FILE_SIZE = 0
    ##  Maximum number of locks returned per page
    # LFS_LOCKS_PAGING_NUM = 50
    ##  Allow graceful restarts using SIGHUP to fork
    # ALLOW_GRACEFUL_RESTARTS = true
    ##  After a restart the parent will finish ongoing requests before
    ##  shutting down. Force shutdown if this process takes longer than this delay.
    ##  set to a negative value to disable
    # GRACEFUL_HAMMER_TIME = 60s
    ##  Allows the setting of a startup timeout and waithint for Windows as SVC service
    ##  0 disables this.
    # STARTUP_TIMEOUT = 0
    ##  Static resources, includes resources on custom/, public/ and all uploaded avatars web browser cache time. Note that this cache is disabled when RUN_MODE is "dev". Default is 6h
    # STATIC_CACHE_TIME = 6h
  database:
    ## Database Configuration
    ## mysql / postgresq / sqlite3
    # DB_TYPE = mysql
    # HOST = 127.0.0.1:3306
    # NAME = gitea
    # USER = root
    ## Use PASSWD = `your password` for quoting if you use special characters in the password.
    # PASSWD =
    ## MySQL: either "false" (default), "true", or "skip-verify"
    ## PostgreSQL: either "disable" (default), "require", or "verify-full"
    # SSL_MODE = false ; either "false" (default), "true", or "skip-verify"
    ## ---
    ## MySQL Configuration
    ## ---
    ## Use CHARSET = either "utf8" or "utf8mb4", default is "utf8mb4".
    ## NOTICE: for "utf8mb4" you must use MySQL InnoDB > 5.6. Gitea is unable to check this.
    # CHARSET = utf8mb4
    ## ---
    ## PostgreSQL Configuration
    ## ---
    # SCHEMA =
    ## ---
    ## SQLite Configuration
    ## ---
    ## defaults to data/gitea.db
    # PATH=
    ## Query timeout defaults to: 500
    # SQLITE_TIMEOUT =
    ## defaults to sqlite database default (often DELETE), can be used to enable WAL mode. https://www.sqlite.org/pragma.html#pragma_journal_mode
    # SQLITE_JOURNAL_MODE =
    # ITERATE_BUFFER_SIZE = 50
    ## Show the database generated SQL
    # LOG_SQL = false ; if unset defaults to true
    ## Maximum number of DB Connect retries
    # DB_RETRIES = 10
    ## Backoff time per DB retry (time.Duration)
    # DB_RETRY_BACKOFF = 3s
    ## Max idle database connections on connection pool, default is 2
    # MAX_IDLE_CONNS = 2
    ## Database connection max life time, default is 0 or 3s mysql (See #6804 & #7071 for reasoning)
    # CONN_MAX_LIFETIME = 3s
    ## Database maximum number of open connections, default is 0 meaning no maximum
    # MAX_OPEN_CONNS = 0
  lfs:

